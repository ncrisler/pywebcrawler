#summary Examples on how to use and customize your crawler

<wiki:toc max_depth="2" />

== Basic usage ==
In it's least complex form, the crawler will just keep crawling until it can't find anymore URLs out there!
{{{
from pywebcrawler import WebCrawler, Journal

journal = Journal()
journal.addUrl('http://www.start-here.com/')
journal.addUrl('http://www.also-visit-me.com/')

try:
    crawler = WebCrawler(journal)
    crawler.start()
except KeyboardInterrupt:
    crawler.stop()
}}}


== Crawling specific domain(s) ==
When validation on URLs are required, adding the logic to the `addUrl`-method of the [Journal Journal-object] would in most cases be preferable. Here's a simple example showing how to subclass the `Journal`-object and modify the `addUrl`-method to fit your purpose. To read more about how the crawler works with URLs [URLs click here].
{{{
from pywebcrawler import WebCrawler, Journal, getDomainName

class MyJournal(Journal):
    def addUrl(self, url, referer=None):
        if getDomainName(url) == 'crawl-me.com':
            Journal.addUrl(self, url, referer)

journal = MyJournal()
journal.addUrl('http://www.crawl-me.com/') # Will be crawled
journal.addUrl('http://crawl-me.com/foo')  # Will be crawled
journal.addUrl('http://bar.crawl-me.com/') # Ignored
journal.addUrl('http://www.tgdaily.com/')  # Ignored

try:
    crawler = WebCrawler(journal)
    crawler.start()
except KeyboardInterrupt:
    crawler.stop()
}}}

== Saving the HTML source ==
Whenever a page has been downloaded and parsed, the `urlCrawled`-method of the [Journal Journal-object] is revoked by the crawler, passing three parameters: the URL, the HTML-source and a HTTP status code.
{{{
from pywebcrawler import WebCrawler, Journal, getDomainName

class MyJournal(Journal):
    def _save(self, url, source):
        import md5
        m = md5.new(url)
        filename = '%s.html' % m.hexdigest()
        open(filename, 'w').write(source)

    def urlCrawled(self, url, source, status):
        Journal.urlCrawled(self, url, source, status)

        # When an urllib2.URLError occurs, both source and status will be None.
        # In that case, we don't have anything to save.
        if not source is None:
            self._save(url, source)

journal = MyJournal()
journal.addUrl('http://www.start-here.com/')

try:
    crawler = WebCrawler(journal)
    crawler.start()
except KeyboardInterrupt:
    crawler.stop()
}}}

== Saving progress if an error occurs ==
If an unexpected exception is raised during runtime, much information about crawling progress may be lost. Therefore the default [Journal Journal-object] implements two simple methods to overcome this: `dumpState()` and `loadState()`. In the example below the current progress will be save into progress.txt if an exception occurs. You can pass the content of progress.txt into `loadState()` to continue from where the crawler failed.
{{{
from pywebcrawler import WebCrawler, Journal

journal = Journal()
journal.addUrl('http://www.start-here.com/')

try:
    crawler = WebCrawler(journal)
    crawler.start()
except KeyboardInterrupt:
    # Stopped by user - just quit
    crawler.stop()
except:
    # Unexpected exception occurred - save state.
    stateStr = journal.dumpState()
    open('progress.txt', 'w').write(stateStr)
}}}

== Saving progress continuously with a timer ==
Another way of making sure progress isn't lost, is by continuously saving it to a file (or elsewhere) by using a timer that repeatedly revokes a callable object you pass to it.
{{{
from pywebcrawler import WebCrawler, Journal, Timer

class SaveProgress(object):
    def __init__(self, journal):
        self._journal = journal

    def __call__(self):
        stateStr = self._journal.dumpState()
        open('progress.txt', 'w').write(stateStr)

journal = Journal()
journal.addUrl('http://www.start-here.com/')

autosave = Timer(SaveProgress(journal), 60, 0)
autosave.start()

try:
    crawler = WebCrawler(journal)
    crawler.start()
except KeyboardInterrupt:
    # Stopped by user - just quit
    crawler.stop()
finally:
    autosave.stop()
}}}